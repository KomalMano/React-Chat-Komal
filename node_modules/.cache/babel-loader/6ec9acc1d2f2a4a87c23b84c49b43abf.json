{"ast":null,"code":"import _slicedToArray from\"D:/Software/Web Development/Projects/4.Chat-app using React+firebase+scss/chatting-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useContext,useReducer}from\"react\";import{AuthContext}from\"./AuthContext\";import{jsx as _jsx}from\"react/jsx-runtime\";export var ChatContext=/*#__PURE__*/createContext();export var ChatContextProvider=function ChatContextProvider(_ref){var children=_ref.children;var _useContext=useContext(AuthContext),currentUser=_useContext.currentUser;var INITIAL_STATE={chatId:\"null\",user:{}};var chatReducer=function chatReducer(state,action){switch(action.type){case\"CHANGE_USER\":return{user:action.payload,chatId:currentUser.uid>action.payload.uid?currentUser.uid+action.payload.uid:action.payload.uid+currentUser.uid};default:return state;}};var _useReducer=useReducer(chatReducer,INITIAL_STATE),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(ChatContext.Provider,{value:{data:state,dispatch:dispatch},children:children});};// import { createContext, useContext, useReducer } from 'react'\n// import { AuthContext } from './AuthContext'\n// export const ChatContext = createContext()\n// export const ChatContextProvider = ({children}) => {\n//     const {currentUser} = useContext(AuthContext)\n//     const INITIAL_STATE = {\n//         chatId: \"null\",\n//         user: {}\n//     }\n//     const chatReducer = (state, action) => {\n//         switch(action.type){\n//             case \"CHANGE_USER\":\n//                 return{\n//                     user:action.payload,\n//                     chatId: \n//                         currentUser.uid > action.payload.uid \n//                         ? currentUser.uid + action.payload.uid \n//                         : action.payload.uid + currentUser.uid\n//                 };\n//                 default:\n//                     return state;\n//         }\n//     }\n//     // now update the state and dispatch and use in any component\n//         const [state, dispatch] = useReducer(chatReducer, INITIAL_STATE);\n//     return(\n//     <ChatContext.Provider value={{ data:state, dispatch }}>\n//         {children}\n//     </ChatContext.Provider>\n//     )\n// }","map":{"version":3,"names":["createContext","useContext","useReducer","AuthContext","ChatContext","ChatContextProvider","children","currentUser","INITIAL_STATE","chatId","user","chatReducer","state","action","type","payload","uid","dispatch","data"],"sources":["D:/Software/Web Development/Projects/4.Chat-app using React+firebase+scss/chatting-app/src/context/ChatContext.js"],"sourcesContent":["import {\r\n  createContext,\r\n  useContext,\r\n  useReducer,\r\n} from \"react\";\r\nimport { AuthContext } from \"./AuthContext\";\r\n\r\nexport const ChatContext = createContext();\r\n\r\nexport const ChatContextProvider = ({ children }) => {\r\n  const { currentUser } = useContext(AuthContext);\r\n  const INITIAL_STATE = {\r\n    chatId: \"null\",\r\n    user: {},\r\n  };\r\n\r\n  const chatReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case \"CHANGE_USER\":\r\n        return {\r\n          user: action.payload,\r\n          chatId:\r\n            currentUser.uid > action.payload.uid\r\n              ? currentUser.uid + action.payload.uid\r\n              : action.payload.uid + currentUser.uid,\r\n        };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(chatReducer, INITIAL_STATE);\r\n\r\n  return (\r\n    <ChatContext.Provider value={{ data:state, dispatch }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { createContext, useContext, useReducer } from 'react'\r\n// import { AuthContext } from './AuthContext'\r\n\r\n// export const ChatContext = createContext()\r\n\r\n// export const ChatContextProvider = ({children}) => {\r\n//     const {currentUser} = useContext(AuthContext)\r\n\r\n//     const INITIAL_STATE = {\r\n//         chatId: \"null\",\r\n//         user: {}\r\n//     }\r\n\r\n//     const chatReducer = (state, action) => {\r\n//         switch(action.type){\r\n//             case \"CHANGE_USER\":\r\n//                 return{\r\n//                     user:action.payload,\r\n//                     chatId: \r\n//                         currentUser.uid > action.payload.uid \r\n//                         ? currentUser.uid + action.payload.uid \r\n//                         : action.payload.uid + currentUser.uid\r\n//                 };\r\n//                 default:\r\n//                     return state;\r\n//         }\r\n//     }\r\n\r\n//     // now update the state and dispatch and use in any component\r\n//         const [state, dispatch] = useReducer(chatReducer, INITIAL_STATE);\r\n\r\n//     return(\r\n//     <ChatContext.Provider value={{ data:state, dispatch }}>\r\n//         {children}\r\n//     </ChatContext.Provider>\r\n//     )\r\n// }"],"mappings":"4KAAA,OACEA,aADF,CAEEC,UAFF,CAGEC,UAHF,KAIO,OAJP,CAKA,OAASC,WAAT,KAA4B,eAA5B,C,2CAEA,MAAO,IAAMC,YAAW,cAAGJ,aAAa,EAAjC,CAEP,MAAO,IAAMK,oBAAmB,CAAG,QAAtBA,oBAAsB,MAAkB,IAAfC,SAAe,MAAfA,QAAe,CACnD,gBAAwBL,UAAU,CAACE,WAAD,CAAlC,CAAQI,WAAR,aAAQA,WAAR,CACA,GAAMC,cAAa,CAAG,CACpBC,MAAM,CAAE,MADY,CAEpBC,IAAI,CAAE,EAFc,CAAtB,CAKA,GAAMC,YAAW,CAAG,QAAdA,YAAc,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACrC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAK,aAAL,CACE,MAAO,CACLJ,IAAI,CAAEG,MAAM,CAACE,OADR,CAELN,MAAM,CACJF,WAAW,CAACS,GAAZ,CAAkBH,MAAM,CAACE,OAAP,CAAeC,GAAjC,CACIT,WAAW,CAACS,GAAZ,CAAkBH,MAAM,CAACE,OAAP,CAAeC,GADrC,CAEIH,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAqBT,WAAW,CAACS,GALlC,CAAP,CAQF,QACE,MAAOJ,MAAP,CAXJ,CAaD,CAdD,CAgBA,gBAA0BV,UAAU,CAACS,WAAD,CAAcH,aAAd,CAApC,4CAAOI,KAAP,iBAAcK,QAAd,iBAEA,mBACE,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAE,CAAEC,IAAI,CAACN,KAAP,CAAcK,QAAQ,CAARA,QAAd,CAA7B,UACGX,QADH,EADF,CAKD,CA9BM,CAkDP;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}