{"ast":null,"code":"var _jsxFileName = \"D:\\\\Softwares Working\\\\All data\\\\Web Develpment\\\\Projects\\\\Chat-app using React+firebase\\\\chatting-app\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Img from '../img/img.png';\nimport Attach from '../img/attach.png';\nimport { useState } from 'react';\nimport { db, storage } from '../firebase';\nimport { v4 as uuid } from \"uuid\";\nimport { async } from '@firebase/util';\nimport { arrayUnion, doc, serverTimestamp, Timestamp, updateDoc } from 'firebase/firestore';\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = () => {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [img, setImg] = useState(null);\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    data\n  } = useContext(ChatContext);\n\n  const handleSend = async () => {\n    if (img) {\n      const storageRef = ref(storage, uuid());\n      const uploadTask = uploadBytesResumable(storageRef, img);\n      uploadTask.on(error => {// setErr(true)\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(async downloadURL => {\n          await updateDoc(doc(db, \"chats\", data.chatId), {\n            messages: arrayUnion({\n              // use unique id which is used in input.jsx\n              id: uuid(),\n              text,\n              senderId: currentUser.uid,\n              date: Timestamp.now(),\n              img: downloadURL\n            })\n          });\n        });\n      });\n    } else {\n      await updateDoc(doc(db, \"chats\", data.chatId), {\n        messages: arrayUnion({\n          // use unique id which is used in input.jsx\n          id: uuid,\n          text,\n          senderId: currentUser.uid,\n          date: Timestamp.now()\n        })\n      });\n    } // for u\n\n\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    }); // for other user\n\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\n      [data.chatId + \".lastMessage\"]: {\n        text\n      },\n      [data.chatId + \".date\"]: serverTimestamp()\n    });\n    setText(\"\");\n    setImg(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type Something...\",\n      onChange: e => setText(e.target.value),\n      value: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: Attach,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        style: {\n          display: \"none\"\n        },\n        id: \"file\",\n        onChange: e => setImg(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: Img,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"MzmvNsqaGuEtok3XCjZnq/CgKe0=\");\n\n_c = Input;\nexport default Input; // import React from 'react'\n// import Img from '../img/img.png'\n// import Attach from '../img/attach.png'\n// import { useState } from 'react'\n// import { async } from '@firebase/util'\n// import { arrayUnion, doc, serverTimestamp, Timestamp, updateDoc } from 'firebase/firestore'\n// import { db, storage } from '../Firebase'\n// import { v4 as uuid } from \"uuid\"\n// import { uploadBytesResumable } from 'firebase/storage'\n// const Input = () => {\n//   const [text, setText] = useState(\"\")\n//   const [img, setImg] = useState(null)\n//   const {currentUser} = useContext(AuthContext)\n//   const {data} = useContext(ChatContext)\n//   const handleSend = async () => {\n//     if(img){\n//       const storageRef = ref(storage, uuid())\n//       const uploadTask = uploadBytesResumable(storageRef, img)\n//       uploadTask.on('state_changed', \n//         (error) => {\n//           // setErr(true)\n//         }, \n//         () => {\n//         getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\n//           await updateDoc(doc(db, \"chats\", data.chatId), {\n//             messages: arrayUnion({\n//               // use unique id which is used in input.jsx\n//               id: uuid(),\n//               text,\n//               senderId:currentUser.uid,\n//               date:Timestamp.now(),\n//               img: downloadURL,\n//             }),\n//           });\n//       });\n//     }\n//   );\n//     }else{\n//       await updateDoc(doc(db, \"chats\", data.chatId), {\n//         messages: arrayUnion({\n//           // use unique id which is used in input.jsx\n//           id: uuid,\n//           text,\n//           senderId:currentUser.uid,\n//           date:Timestamp.now(),\n//         }),\n//       });\n//     }\n//     // for u\n//     await updateDoc(doc(db, \"userChats\", currentUser.uid), {\n//       [data.chatId + \".lastMessage\"]:{\n//         text\n//       },\n//       [data.chatId+\".date\"]: serverTimestamp()\n//     })\n//     // for other user\n//     await updateDoc(doc(db, \"userChats\", data.user.uid), {\n//       [data.chatId + \".lastMessage\"]:{\n//         text\n//       },\n//       [data.chatId+\".date\"]: serverTimestamp()\n//     })\n//     setText(\"\")\n//     setImg(null)\n//   }\n//   return (\n//     <div className='input'>\n//       <input type=\"text\" placeholder=\"Type Something...\" \n//       onChange={e=>setText(e.target.value)}\n//       value={text}\n//       />\n//       <div className='send'>\n//         <img src={Attach} alt='' />\n//         <input type='file' style={{display:\"none\" }} \n//           id=\"file\" \n//           onChange={e=>setImg(e.target.files[0])}\n//           />\n//         <label htmlFor='file'>\n//           <img src={Img} alt='' />\n//         </label>\n//         <button onClick={handleSend}>Send</button>\n//       </div>\n//     </div>\n//   )\n// }\n// export default Input\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["React","Img","Attach","useState","db","storage","v4","uuid","async","arrayUnion","doc","serverTimestamp","Timestamp","updateDoc","getDownloadURL","ref","uploadBytesResumable","Input","text","setText","img","setImg","currentUser","useContext","AuthContext","data","ChatContext","handleSend","storageRef","uploadTask","on","error","snapshot","then","downloadURL","chatId","messages","id","senderId","uid","date","now","user","e","target","value","display","files"],"sources":["D:/Softwares Working/All data/Web Develpment/Projects/Chat-app using React+firebase/chatting-app/src/components/Input.jsx"],"sourcesContent":["import React from 'react'\r\nimport Img from '../img/img.png'\r\nimport Attach from '../img/attach.png'\r\nimport { useState } from 'react'\r\nimport { db, storage } from '../firebase'\r\nimport { v4 as uuid } from \"uuid\"\r\n\r\nimport { async } from '@firebase/util'\r\nimport { arrayUnion, doc, serverTimestamp, Timestamp, updateDoc } from 'firebase/firestore'\r\nimport { getDownloadURL, ref, uploadBytesResumable } from 'firebase/storage'\r\n\r\nconst Input = () => {\r\n\r\n  const [text, setText] = useState(\"\")\r\n  const [img, setImg] = useState(null)\r\n\r\n  const {currentUser} = useContext(AuthContext)\r\n  const {data} = useContext(ChatContext)\r\n\r\n  const handleSend = async () => {\r\n    if(img){\r\n      const storageRef = ref(storage, uuid())\r\n      const uploadTask = uploadBytesResumable(storageRef, img)\r\n\r\n      uploadTask.on( \r\n        (error) => {\r\n          // setErr(true)\r\n        }, \r\n        () => {\r\n        getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n          await updateDoc(doc(db, \"chats\", data.chatId), {\r\n            messages: arrayUnion({\r\n              // use unique id which is used in input.jsx\r\n              id: uuid(),\r\n              text,\r\n              senderId:currentUser.uid,\r\n              date:Timestamp.now(),\r\n              img: downloadURL,\r\n            }),\r\n          });\r\n      });\r\n    }\r\n  );\r\n\r\n    }else{\r\n      await updateDoc(doc(db, \"chats\", data.chatId), {\r\n        messages: arrayUnion({\r\n          // use unique id which is used in input.jsx\r\n          id: uuid,\r\n          text,\r\n          senderId:currentUser.uid,\r\n          date:Timestamp.now(),\r\n        }),\r\n      });\r\n    }\r\n    // for u\r\n    await updateDoc(doc(db, \"userChats\", currentUser.uid), {\r\n      [data.chatId + \".lastMessage\"]:{\r\n        text,\r\n      },\r\n      [data.chatId+\".date\"]: serverTimestamp()\r\n    })\r\n    // for other user\r\n    await updateDoc(doc(db, \"userChats\", data.user.uid), {\r\n      [data.chatId + \".lastMessage\"]:{\r\n        text,\r\n      },\r\n      [data.chatId+\".date\"]: serverTimestamp()\r\n    })\r\n\r\n    setText(\"\")\r\n    setImg(null)\r\n  }\r\n\r\n  return (\r\n    <div className='input'>\r\n      <input type=\"text\" placeholder=\"Type Something...\" \r\n      onChange={(e)=>setText(e.target.value)}\r\n      value={text}\r\n      />\r\n      <div className='send'>\r\n        <img src={Attach} alt='' />\r\n        <input type='file' style={{display:\"none\" }} \r\n          id=\"file\" \r\n          onChange={(e)=>setImg(e.target.files[0])}\r\n          />\r\n        <label htmlFor='file'>\r\n          <img src={Img} alt='' />\r\n        </label>\r\n        <button onClick={handleSend}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react'\r\n// import Img from '../img/img.png'\r\n// import Attach from '../img/attach.png'\r\n// import { useState } from 'react'\r\n// import { async } from '@firebase/util'\r\n// import { arrayUnion, doc, serverTimestamp, Timestamp, updateDoc } from 'firebase/firestore'\r\n// import { db, storage } from '../Firebase'\r\n// import { v4 as uuid } from \"uuid\"\r\n// import { uploadBytesResumable } from 'firebase/storage'\r\n\r\n// const Input = () => {\r\n\r\n//   const [text, setText] = useState(\"\")\r\n//   const [img, setImg] = useState(null)\r\n\r\n//   const {currentUser} = useContext(AuthContext)\r\n//   const {data} = useContext(ChatContext)\r\n\r\n//   const handleSend = async () => {\r\n//     if(img){\r\n//       const storageRef = ref(storage, uuid())\r\n//       const uploadTask = uploadBytesResumable(storageRef, img)\r\n\r\n//       uploadTask.on('state_changed', \r\n\r\n//         (error) => {\r\n//           // setErr(true)\r\n//         }, \r\n//         () => {\r\n//         getDownloadURL(uploadTask.snapshot.ref).then(async (downloadURL) => {\r\n//           await updateDoc(doc(db, \"chats\", data.chatId), {\r\n//             messages: arrayUnion({\r\n//               // use unique id which is used in input.jsx\r\n//               id: uuid(),\r\n//               text,\r\n//               senderId:currentUser.uid,\r\n//               date:Timestamp.now(),\r\n//               img: downloadURL,\r\n//             }),\r\n//           });\r\n//       });\r\n//     }\r\n//   );\r\n\r\n//     }else{\r\n//       await updateDoc(doc(db, \"chats\", data.chatId), {\r\n//         messages: arrayUnion({\r\n//           // use unique id which is used in input.jsx\r\n//           id: uuid,\r\n//           text,\r\n//           senderId:currentUser.uid,\r\n//           date:Timestamp.now(),\r\n//         }),\r\n//       });\r\n//     }\r\n//     // for u\r\n//     await updateDoc(doc(db, \"userChats\", currentUser.uid), {\r\n//       [data.chatId + \".lastMessage\"]:{\r\n//         text\r\n//       },\r\n//       [data.chatId+\".date\"]: serverTimestamp()\r\n//     })\r\n//     // for other user\r\n//     await updateDoc(doc(db, \"userChats\", data.user.uid), {\r\n//       [data.chatId + \".lastMessage\"]:{\r\n//         text\r\n//       },\r\n//       [data.chatId+\".date\"]: serverTimestamp()\r\n//     })\r\n\r\n//     setText(\"\")\r\n//     setImg(null)\r\n//   }\r\n\r\n//   return (\r\n//     <div className='input'>\r\n//       <input type=\"text\" placeholder=\"Type Something...\" \r\n//       onChange={e=>setText(e.target.value)}\r\n//       value={text}\r\n//       />\r\n//       <div className='send'>\r\n//         <img src={Attach} alt='' />\r\n//         <input type='file' style={{display:\"none\" }} \r\n//           id=\"file\" \r\n//           onChange={e=>setImg(e.target.files[0])}\r\n//           />\r\n//         <label htmlFor='file'>\r\n//           <img src={Img} alt='' />\r\n//         </label>\r\n//         <button onClick={handleSend}>Send</button>\r\n//       </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default Input\r\n"],"mappings":"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;QAAmB,KAAK,EAAE;UAAC4C,OAAO,EAAC;QAAT,CAA1B;QACE,EAAE,EAAC,MADL;QAEE,QAAQ,EAAGH,CAAD,IAAKtB,MAAM,CAACsB,CAAC,CAACC,MAAF,CAASG,KAAT,CAAe,CAAf,CAAD;MAFvB;QAAA;QAAA;QAAA;MAAA,QAFF,eAME;QAAO,OAAO,EAAC,MAAf;QAAA,uBACE;UAAK,GAAG,EAAE9C,GAAV;UAAe,GAAG,EAAC;QAAnB;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QANF,eASE;QAAQ,OAAO,EAAE0B,UAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CAlFD;;GAAMV,K;;KAAAA,K;AAoFN,eAAeA,KAAf,C,CAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA"},"metadata":{},"sourceType":"module"}