{"ast":null,"code":"import _slicedToArray from\"D:/Softwares Working/All data/Web Develpment/Projects/4.Chat-app using React+firebase+scss/chatting-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{onAuthStateChanged}from'firebase/auth';import{createContext,useContext,useReducer}from'react';import{auth}from'../firebase';import{AuthContext}from'./AuthContext';import{jsx as _jsx}from\"react/jsx-runtime\";export var ChatContext=/*#__PURE__*/createContext();export var ChatContextProvider=function ChatContextProvider(_ref){var children=_ref.children;var _useContext=useContext(AuthContext),currentUser=_useContext.currentUser;var INITIAL_STATE={chatId:\"null\",user:{}};var chatReducer=function chatReducer(state,action){switch(action.type){case\"CHANGE_USER\":return{user:action.payload,chatId:currentUser.uid>action.payload.uid?currentUser.uid+action.payload.uid:action.payload.uid+currentUser.uid};default:return state;}};// now update the state and dispatch and use in any component\nvar _useReducer=useReducer(chatReducer,INITIAL_STATE),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];return/*#__PURE__*/_jsx(ChatContext.Provider,{value:{data:state,dispatch:dispatch},children:children});};","map":{"version":3,"names":["onAuthStateChanged","createContext","useContext","useReducer","auth","AuthContext","ChatContext","ChatContextProvider","children","currentUser","INITIAL_STATE","chatId","user","chatReducer","state","action","type","payload","uid","dispatch","data"],"sources":["D:/Softwares Working/All data/Web Develpment/Projects/4.Chat-app using React+firebase+scss/chatting-app/src/context/ChatContext.js"],"sourcesContent":["import { onAuthStateChanged } from 'firebase/auth'\r\nimport { createContext, useContext, useReducer } from 'react'\r\nimport { auth } from '../firebase'\r\nimport { AuthContext } from './AuthContext'\r\n\r\nexport const ChatContext = createContext()\r\n\r\nexport const ChatContextProvider = ({children}) => {\r\n    const {currentUser} = useContext(AuthContext)\r\n\r\n    const INITIAL_STATE = {\r\n        chatId: \"null\",\r\n        user: {}\r\n    }\r\n\r\n    const chatReducer = (state, action) => {\r\n        switch(action.type){\r\n            case \"CHANGE_USER\":\r\n                return{\r\n                    user:action.payload,\r\n                    chatId: \r\n                        currentUser.uid > action.payload.uid \r\n                        ? currentUser.uid + action.payload.uid \r\n                        : action.payload.uid + currentUser.uid\r\n                };\r\n                default:\r\n                    return state;\r\n        }\r\n    }\r\n\r\n    // now update the state and dispatch and use in any component\r\n        const [state, dispatch] = useReducer(chatReducer, INITIAL_STATE);\r\n\r\n    return(\r\n    <ChatContext.Provider value={{ data:state, dispatch }}>\r\n        {children}\r\n    </ChatContext.Provider>\r\n    )\r\n}"],"mappings":"6LAAA,OAASA,kBAAT,KAAmC,eAAnC,CACA,OAASC,aAAT,CAAwBC,UAAxB,CAAoCC,UAApC,KAAsD,OAAtD,CACA,OAASC,IAAT,KAAqB,aAArB,CACA,OAASC,WAAT,KAA4B,eAA5B,C,2CAEA,MAAO,IAAMC,YAAW,cAAGL,aAAa,EAAjC,CAEP,MAAO,IAAMM,oBAAmB,CAAG,QAAtBA,oBAAsB,MAAgB,IAAdC,SAAc,MAAdA,QAAc,CAC/C,gBAAsBN,UAAU,CAACG,WAAD,CAAhC,CAAOI,WAAP,aAAOA,WAAP,CAEA,GAAMC,cAAa,CAAG,CAClBC,MAAM,CAAE,MADU,CAElBC,IAAI,CAAE,EAFY,CAAtB,CAKA,GAAMC,YAAW,CAAG,QAAdA,YAAc,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACnC,OAAOA,MAAM,CAACC,IAAd,EACI,IAAK,aAAL,CACI,MAAM,CACFJ,IAAI,CAACG,MAAM,CAACE,OADV,CAEFN,MAAM,CACFF,WAAW,CAACS,GAAZ,CAAkBH,MAAM,CAACE,OAAP,CAAeC,GAAjC,CACET,WAAW,CAACS,GAAZ,CAAkBH,MAAM,CAACE,OAAP,CAAeC,GADnC,CAEEH,MAAM,CAACE,OAAP,CAAeC,GAAf,CAAqBT,WAAW,CAACS,GALrC,CAAN,CAOA,QACI,MAAOJ,MAAP,CAVZ,CAYH,CAbD,CAeA;AACI,gBAA0BX,UAAU,CAACU,WAAD,CAAcH,aAAd,CAApC,4CAAOI,KAAP,iBAAcK,QAAd,iBAEJ,mBACA,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAE,CAAEC,IAAI,CAACN,KAAP,CAAcK,QAAQ,CAARA,QAAd,CAA7B,UACKX,QADL,EADA,CAKH,CA/BM"},"metadata":{},"sourceType":"module"}